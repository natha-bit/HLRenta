@page "/perfil"


@using HLRenta.web.Data
@using HLRenta.web.Data.Dtos
@using HLRenta.web.Data.Entities
@using HLRenta.web.Data.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity



@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IVehiculoService vehiculoService
@inject IReservaService reservacionService
@inject IJSRuntime JSRuntime




@rendermode InteractiveServer
<div class="container">
    <div class="header">
        <div class="admin-info">
            <div class="avatar">@GetIniciales(nombreUsuario)</div>
            <div class="admin-details">
                <h1>@nombreUsuario</h1>
                <p>Administrador del Sistema</p>
            </div>
        </div>
    </div>


    <div class="dashboard">
        <div class="card">
            <h2>🚗 Gestión de Vehículos</h2>
            <p style="color: #666; margin-bottom: 25px; line-height: 1.6;">
                Administra tu flota de vehículos de manera eficiente. Agrega nuevos autos, actualiza información existente y mantén tu inventario organizado.
            </p>
            <a href="agregar" class="btn" style="text-decoration: none; display: inline-block; text-align: center;">
                ➕ Agregar Nuevo Vehículo
            </a>
        </div>

        <div class="card">
            <h2>📊 Generar Reportes</h2>

            <div class="form-group">
                <label for="tipoReporte">Tipo de Reporte</label>
                <select id="tipoReporte" class="form-control" @bind="tipoReporte">
                    <option value="reservaciones">Reservaciones</option>
                    <option value="vehiculos">Vehículos</option>
                </select>
            </div>

            @if (tipoReporte == "reservaciones")
            {
                <div class="form-row">
                    <div class="form-group">
                        <label for="fechaInicio">Fecha Inicio</label>
                        <input type="date" id="fechaInicio" class="form-control" @bind="fechaInicio" />
                    </div>
                    <div class="form-group">
                        <label for="fechaFin">Fecha Fin</label>
                        <input type="date" id="fechaFin" class="form-control" @bind="fechaFin" />
                    </div>
                </div>
            }

            <div class="report-section">
                <button class="btn btn-secondary" @onclick="GenerarReporte">📄 Generar</button>
            </div>
        </div>

        
</div>
</div>
@if (mostrarTabla)
{
    <div class="reporte-expandido">
        @if (tipoReporte == "vehiculos")
        {
            <h2>🚗 Vehículos Disponibles</h2>
            <table class="reservations-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Marca</th>
                        <th>Modelo</th>
                        <th>Año</th>
                        <th>Precio</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var v in vehiculos)
                    {
                        <tr>
                            <td>@v.Id</td>
                            <td>@v.Marca</td>
                            <td>@v.Modelo</td>
                            <td>@v.Anio</td>
                            <td>RD$ @v.PrecioPorDia.ToString("N2")</td>
                            <td>
                                <button class="btn btn-sm btn-primary" @onclick="() => EditarVehiculo(v.Id)">Editar</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => EliminarVehiculo(v.Id)">Eliminar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else if (tipoReporte == "reservaciones")
        {
            <h2>📋 Reservaciones en el período</h2>
            @if (reservaciones.Count == 0)
            {
                <p>No hay reservaciones en ese período de tiempo.</p>
            }
            else
            {
                <table class="reservations-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Cliente</th>
                            <th>Vehículo</th>
                            <th>Fecha Inicio</th>
                            <th>Fecha Fin</th>
                            <th>Total</th>
                            <th>Estado</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var r in reservaciones)
                        {
                            <tr>
                                <td>@r.Id</td>
                                <td>@r.ClienteNombre</td>
                                <td>@r.VehiculoModelo</td>
                                <td>@r.FechaHoraRecogida.ToString("dd/MM/yyyy")</td>
                                <td>@r.FechaHoraDevolucion.ToString("dd/MM/yyyy")</td>
                                <td>RD$ @r.Total.ToString("N2")</td>
                                <td><span class="status">@r.Estado</span></td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        }
    </div>
}
@code {
    private string nombreUsuario = "";
    private string tipoReporte = "reservaciones";
    private DateTime? fechaInicio;
    private DateTime? fechaFin;
    private bool mostrarTabla = false;
    [Inject] NavigationManager NavigationManager { get; set; }

    private List<VehiculoDto> vehiculos = new();
    private List<ReservaDto> reservaciones = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var identityUser = await UserManager.GetUserAsync(user);
            nombreUsuario = identityUser?.name ?? identityUser?.UserName ?? "Usuario";
            
        }
        else
        {
            nombreUsuario = "Invitado";
        }
    }

    private string GetIniciales(string nombre)
    {
        if (string.IsNullOrWhiteSpace(nombre))
            return "??";

        var partes = nombre.Split(' ');
        if (partes.Length == 1)
            return partes[0].Substring(0, 1).ToUpper();

        return (partes[0][0].ToString() + partes[1][0].ToString()).ToUpper();
    }

    private async Task GenerarReporte()
    {
        mostrarTabla = false;

        if (tipoReporte == "vehiculos")
        {
            vehiculos = await vehiculoService.ObtenerTodosAsync(); // o ObtenerTodosAsync()
        }
        else if (tipoReporte == "reservaciones")
        {
            if (fechaInicio != null && fechaFin != null)
            {
                
            }
        }

        mostrarTabla = true;
    }

    private void EditarVehiculo(int id)
    {
        NavigationManager.NavigateTo($"/agregar/{id}"); ;
    }

    private async Task EliminarVehiculo(int id)
    {
        bool confirmado = await JSRuntime.InvokeAsync<bool>("confirm", "¿Deseas eliminar este vehículo?");
        if (confirmado)
        {
            await vehiculoService.EliminarAsync(id);
            vehiculos = await vehiculoService.ObtenerTodosAsync();
        }
    }

}
