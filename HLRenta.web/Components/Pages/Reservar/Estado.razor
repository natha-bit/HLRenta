@page "/estado"
@using System.ComponentModel.DataAnnotations
@using HLRenta.web.Data.Services
@using HLRenta.web.Data.Dtos
@inject IClienteService clienteService
@inject IReservaService reservaService
@rendermode InteractiveServer

<style>
    .search-card input.form-control {
        width: 90%;
        padding: 0.6rem 1rem;
        border: 1px solid #ccc;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.3s;
    }

        .search-card input.form-control:focus {
            border-color: #007bff;
            outline: none;
        }

</style>
<div class="search-card">
    @if (!string.IsNullOrEmpty(mensaje))
    {
        var esError = mensaje.Contains("❌");
        <div class="alert @(esError ? "alert-danger" : "alert-success") mt-3">
            @mensaje
        </div>
    }
    <EditForm Model="@busqueda" OnValidSubmit="VerificarLicencia" FormName="formVerificacion">
        <ValidationSummary />

        <div class="form-group">
            <label for="licencia"><strong>Número de Licencia</strong></label>
            <InputText id="licencia" class="form-control" @bind-Value="busqueda.NumeroLicencia" />
        </div>

        <button type="submit" class="btn btn-primary mt-2">
            <span class="me-1">🔍</span> Verificar
        </button>
    </EditForm>
</div>
@if (reserva != null)
{
    <div class="reservation-details mt-4">
        <div class="reservation-header">
            <h2>Licencia: @busqueda.NumeroLicencia</h2>
            <div class="status-badge @GetEstadoColor(reserva.Estado)">
                @GetEstadoIcono(reserva.Estado) @reserva.Estado
            </div>
        </div>

        @{
            // Toma la primera imagen de la lista (si existe)
            var img = reserva?.Vehiculo?.Imagenes?.FirstOrDefault();

            // Si la ruta es relativa y no empieza con “/”, agrégala
            if (!string.IsNullOrWhiteSpace(img) && !img.StartsWith("/"))
                img = "/" + img;
        }

        @* ------------ Vista ---------------- *@
        @if (!string.IsNullOrWhiteSpace(img))
        {
            <img src="@img"
                 alt="Vehículo"
                 class="car-image" />
        }
        else
        {
            <img src="/images/placeholder-car.png" @* o tu imagen por defecto *@
                 alt="Vehículo"
                 class="car-image" />
        }

        <div class="detail-grid">
            <div class="detail-section">
                <h3>👤 Información del Cliente</h3>
                <div class="detail-item">
                    <span class="detail-label">Nombre:</span>
                    @($"{reserva.Cliente.Nombre} {reserva.Cliente.Apellido}")
                </div>
                <div class="detail-item"><span class="detail-label">Licencia:</span> @busqueda.NumeroLicencia</div>
                <div class="detail-item"><span class="detail-label">Teléfono:</span> @reserva.Cliente.Telefono</div>
                <div class="detail-item"><span class="detail-label">Correo:</span> @reserva.Cliente.Email</div>

            </div>

            
                <div class="detail-section">
                    <h3>🚗 Vehículo</h3>
                    <div class="detail-item"><span class="detail-label">Marca:</span>  @reserva.Vehiculo.Marca</div>
                    <div class="detail-item"><span class="detail-label">Modelo:</span> @reserva.Vehiculo.Modelo</div>
                    <div class="detail-item"><span class="detail-label">Año:</span>    @reserva.Vehiculo.Anio</div>
                    <div class="detail-item"><span class="detail-label">Placa:</span>  @reserva.Vehiculo.Placa</div>
                    <div class="detail-item"><span class="detail-label">Color:</span>  @reserva.Vehiculo.Color</div>
                    <div class="detail-item"><span class="detail-label">Precio/Día:</span> @reserva.Vehiculo.PrecioPorDia.ToString("C")</div>
                </div>

            <div class="detail-section">
                <h3>📅 Fechas de Alquiler</h3>
                <span class="detail-label">Recogida:</span>
                <br />
                <br />
                <span class="detail-value">@reserva.FechaHoraRecogida.ToString("dddd, d 'de' MMMM 'de' yyyy - hh:mm tt")</span>
                <br />
                <br />
                <span class="detail-label">Devolución:</span>   
                <br />
                <br />
                <span class="detail-value">@reserva.FechaHoraDevolucion.ToString("dddd, d 'de' MMMM 'de' yyyy - hh:mm tt")</span>
                <br />
                <br />
                <div class="detail-item"><span class="detail-label">Duración:</span> @((reserva.FechaHoraDevolucion - reserva.FechaHoraRecogida).Days) días</div>
            </div>

            <div class="detail-section">
                <h3>📍 Ubicaciones</h3>
                <div class="detail-item"><span class="detail-label">Recogida:</span> @reserva.LugarRecogida</div>
                <div class="detail-item"><span class="detail-label">Devolución:</span> @reserva.LugarDevolucion</div>
            </div>

            <div class="detail-section">
                <h3>💰 Detalles de Precio</h3>
                <div class="detail-item"><span class="detail-label">Subtotal:</span> @reserva.Subtotal.ToString("C")</div>
                <div class="detail-item"><span class="detail-label">Extras:</span> @reserva.Extras.ToString("C")</div>
                <div class="detail-item total-item"><span class="detail-label">TOTAL:</span> @reserva.Total.ToString("C")</div>
            </div>
        </div>
    </div>
}

@code {
    private BusquedaModel busqueda = new();
    private string mensaje;
    private ReservaDto reserva;
    private bool clienteExiste;

    private async Task MostrarMensajeTemporal(string texto, int segundos = 2)
    {
        mensaje = texto;
        StateHasChanged(); // Fuerza la actualización visual inmediata
        await Task.Delay(segundos * 1000); // Espera
        mensaje = string.Empty;
        StateHasChanged(); // Actualiza para ocultarlo
    }

    private async Task VerificarLicencia()
    {
        try
        {
            mensaje = string.Empty;
            reserva = null;

            var licencia = busqueda.NumeroLicencia?.Trim();

            if (string.IsNullOrWhiteSpace(licencia))
            {
                clienteExiste = false;
                await MostrarMensajeTemporal("❌ Debe ingresar un número de licencia.");
                return;
            }

            var cliente = await clienteService.ObtenerPorLicenciaAsync(licencia);
            if (cliente != null)
            {
                clienteExiste = true;
                reserva = await reservaService.ObtenerPorLicenciaAsync(licencia);

                if (reserva == null)
                {
                    await MostrarMensajeTemporal($"✅ Licencia válida: {cliente.Nombre} {cliente.Apellido}. Pero no tiene reservas registradas.");
                }
                else
                {
                    await MostrarMensajeTemporal($"✅ Licencia válida: {cliente.Nombre} {cliente.Apellido}.");
                }
            }
            else
            {
                clienteExiste = false;
                await MostrarMensajeTemporal($"❌ No se encontró ningún cliente con la licencia {licencia}.");
            }
        }
        catch (Exception ex)
        {
            await MostrarMensajeTemporal($"❌ Error interno: {ex.Message}");
        }
    }





    public class BusquedaModel
    {
        [Required(ErrorMessage = "Debe ingresar un número de licencia.")]
        public string NumeroLicencia { get; set; } = string.Empty;
    }

    private string GetEstadoColor(string estado)
    {
        return estado.ToLower() switch
        {
            "confirmada" => "estado-verde",
            "pendiente" => "estado-amarillo",
            "rechazada" => "estado-rojo",
            _ => "estado-gris"
        };
    }

    private string GetEstadoIcono(string estado)
    {
        return estado.ToLower() switch
        {
            "confirmada" => "✅",
            "pendiente" => "⏳",
            "rechazada" => "❌",
            _ => "ℹ️"
        };
    }

}
