@page "/reservar"
@using System.Globalization
@using System.Text.Json
@using HLRenta.web.Data.Dtos
@using HLRenta.web.Data.Services

@inject IJSRuntime JS
@inject IVehiculoService VehiculoService
@inject IClienteService ClienteService
@inject IReservaService ReservaService
@rendermode InteractiveServer

<div class="container">
    <div class="main-content">
        <div class="reservation-form">
            <!-- =================== FORMULARIO =================== -->
            <EditForm Model="@reservaCompleta" OnValidSubmit="ConfirmarReserva">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <!-- ========== SECCIÓN FECHAS Y UBICACIÓN ========== -->
                <div class="form-section">
                    <h3>📅 Fechas y Ubicación</h3>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="pickupDate">Fecha de Recogida</label>
                            <input type="date" @bind="_fechaSalida" TValue="DateOnly?" class="form-control" id="pickupDate" required />

                        </div>
                        <div class="form-group">
                            <label for="returnDate">Fecha de Devolución</label>
                            <input type="date" @bind="_fechaRetorno" TValue="DateOnly?" class="form-control" id="returnDate" required />

                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="pickupTime">Hora de Recogida</label>
                            <input type="time"
                                   @bind="reservaCompleta.HoraSalida"
                                   id="pickupTime"
                                   class="form-control"
                                   required />
                        </div>
                        <div class="form-group">
                            <label for="returnTime">Hora de Devolución</label>
                            <input type="time"
                                   @bind="reservaCompleta.HoraRetorno"
                                   id="returnTime"
                                   class="form-control"
                                   required />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="pickupLocation">Lugar de Recogida</label>
                        <select @bind="reservaCompleta.LugarSalida"
                                id="pickupLocation"
                                class="form-control"
                                required>
                            <option value="">Selecciona una ubicación</option>
                            <option value="Oficina Central Fantino">Oficina Central Fantino</option>
                            <option value="Sucursal Santo Domingo - Este">Sucursal Santo Domingo - Este</option>
                            <option value="Deler San Francisco De Macoris">Deler San Francisco De Macoris</option>
                            <option value="Heidy Motors Cotui">Heidy Motors Cotui</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="returnLocation">Lugar de Retorno</label>
                        <select @bind="reservaCompleta.LugarRetorno"
                                id="returnLocation"
                                class="form-control"
                                required>
                            <option value="">Selecciona una ubicación</option>
                            <option value="Oficina Central Fantino">Oficina Central Fantino</option>
                            <option value="Sucursal Santo Domingo - Este">Sucursal Santo Domingo - Este</option>
                            <option value="Deler San Francisco De Macoris">Deler San Francisco De Macoris</option>
                            <option value="Heidy Motors Cotui">Heidy Motors Cotui</option>
                        </select>
                    </div>
                </div>

                <!-- ========== SECCIÓN VEHÍCULO ========== -->
                <div class="form-section">
                    <h3>🚙 Selecciona tu Vehículo</h3>
                    <div class="form-group">
                        <label for="vehicleType">Vehículo</label>
                        <select @bind="reservaCompleta.VehiculoId"
                                id="vehicleType"
                                class="form-control"
                                required>
                            <option value="">Selecciona un vehículo</option>
                            @foreach (var vehiculo in vehiculosDisponibles)
                            {
                                <option value="@vehiculo.Id">
                                    @vehiculo.Marca @vehiculo.Modelo - @vehiculo.Placa - RD$@vehiculo.PrecioPorDia.ToString("N2")
                                </option>
                            }
                        </select>
                    </div>
                </div>

                @{
                    var vehiculoSeleccionado = vehiculosDisponibles
                    .FirstOrDefault(v => v.Id == reservaCompleta.VehiculoId);

                    var imagenPrincipal = vehiculoSeleccionado?.Imagenes?.FirstOrDefault();
                }

                @if (!string.IsNullOrEmpty(imagenPrincipal))
                {
                    <div class="vehiculo-preview">
                        <img src="@imagenPrincipal"
                             alt="Vista previa del vehículo"
                             style="max-width: 70%; max-height: 190px; border-radius: 12px; margin-top: 10px;" />
                    </div>
                }
                <br />
                <br/>
                <!-- ========== SECCIÓN INFORMACIÓN PERSONAL ========== -->
                <div class="form-section">
                    <h3>👤 Información Personal</h3>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="firstName">Nombre</label>
                            <input type="text" @bind="reservaCompleta.Nombre"
                                       id="firstName"
                                       class="form-control"
                                       required />
                        </div>
                        <div class="form-group">
                            <label for="lastName">Apellido</label>
                            <input type="text" @bind="reservaCompleta.Apellido"
                                       id="lastName"
                                       class="form-control"
                                       required />
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="email">Email</label>
                            <input type="email" @bind="reservaCompleta.Email"
                                       id="email"
                                       class="form-control"
                                       required />
                        </div>
                        <div class="form-group">
                            <label for="phone">Teléfono</label>
                            <input type="tel" @bind="reservaCompleta.Telefono"
                                       id="phone"
                                       class="form-control"
                                       required />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="license">Número de Licencia</label>
                        <input type="text" @bind="reservaCompleta.NumeroLicencia"
                                   id="license"
                                   class="form-control"
                                   required />
                    </div>
                    <div class="form-group">
                        <label for="comments">Comentarios Adicionales</label>
                        <input type="text" @bind="reservaCompleta.Comentarios"
                                       id="comments"
                                       class="form-control"
                                       rows="3"
                                       placeholder="Alguna solicitud especial..." />
                    </div>
                </div>

                <div class="form-group">
                    <button type="submit" class="submit-btn">Confirmar Reserva 🚗</button>
                </div>
            </EditForm>



        </div>

        <!-- ========== TARJETA RESUMEN ========== -->
        <div class="summary-card">
            <h3>📋 Resumen de Reserva</h3>
            <div id="reservationSummary">
                <div class="summary-item"><span>Lugar Salida:</span><span>@(reservaCompleta.LugarSalida ?? "Sin seleccionar")</span></div>
                <div class="summary-item"><span>Lugar Retorno:</span><span>@(reservaCompleta.LugarRetorno ?? "Sin seleccionar")</span></div>
                <div class="summary-item"><span>Fecha Salida:</span><span>@(reservaCompleta.FechaSalida?.ToString("dd/MM/yyyy") ?? "Sin definir")</span></div>
                <div class="summary-item"><span>Fecha Retorno:</span><span>@(reservaCompleta.FechaRetorno?.ToString("dd/MM/yyyy") ?? "Sin definir")</span></div>
                @{
                    var vehiculoSeleccionado = vehiculosDisponibles
                    .FirstOrDefault(v => v.Id == reservaCompleta.VehiculoId);
                }
                <div class="summary-item">
                    <span>Vehículo:</span>
                    <span>
                        @(vehiculoSeleccionado != null
                                                ? $"{vehiculoSeleccionado.Marca} {vehiculoSeleccionado.Modelo} - Placa: {vehiculoSeleccionado.Placa}"
                                                : "Sin seleccionar")
                    </span>
                </div>

                <!-- NUEVOS CAMPOS -->
                <div class="summary-item"><span>Días:</span><span>@diasReserva</span></div>
                <div class="summary-item"><span>Subtotal:</span><span>@subtotalMostrar</span></div>
                <div class="summary-item"><span>Total:</span><span>@totalMostrar</span></div>
            </div>
            @if (mensajeExito != null)
            {
                <div class="success-message">
                    <h3>🎉 ¡Reserva Confirmada!</h3>
                    <p>@mensajeExito</p>
                </div>
            }

        </div>
    </div>
</div>

<script>
    /* ========= LIMPIAR FORMULARIO AL SALIR / RECARGAR ========= */
    const resetForm = () => {
        const form = document.getElementById('reservationForm');
        if (form) form.reset();
    };

    /* Recargar, cerrar pestaña o navegar fuera */
    window.addEventListener('beforeunload', () => {
        localStorage.removeItem('reservaInfo');
        resetForm();
    });

    /* Volver con botón “Atrás” (Back-Forward Cache) */
    window.addEventListener('pageshow', e => {
        if (e.persisted) resetForm();
    });
</script>

@code {
    private List<VehiculoDto> vehiculosDisponibles = new();
    private ReservaDto reservas = new();
    private string? mensajeExito;
    private List<VehiculoDto> _todosVehiculos = new();       // Cache de todo el inventario

    private async Task MostrarMensajeTemporal(string mensaje)
    {
        mensajeExito = mensaje;
        StateHasChanged();
        await Task.Delay(3000); // 3 segundos
        mensajeExito = null;
        StateHasChanged();
    }

    /* ---------- CAMPOS & ESTADO ---------- */
    private ReservaCompletaModel reservaCompleta = new();
    private bool mostrarExito = false;

    protected override async Task OnInitializedAsync()
    {
        // 1️⃣  Trae todo el inventario
        _todosVehiculos = await VehiculoService.ObtenerTodosAsync();

        // 2️⃣  Pregunta por las reservas CONFIRMADAS aún vigentes
        var reservasConfirmadas = await ReservaService.ObtenerActivasAsync();   // ← ya lo tienes

        var idsOcupados = reservasConfirmadas
            .Select(r => r.VehiculoId)
            .Distinct()
            .ToHashSet();

        // 3️⃣  Deja fuera los ocupados
        vehiculosDisponibles = _todosVehiculos
            .Where(v => !idsOcupados.Contains(v.Id))
            .ToList();
    }

    /* ---------- CICLO DE VIDA ---------- */
    protected override void OnInitialized()
    {
        // Reseteo inicial
        reservaCompleta = new ReservaCompletaModel();
        mostrarExito = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CargarDatosReserva();
        }
    }

    /* ---------- PARÁMETROS Y CÁLCULOS ---------- */
    private readonly Dictionary<string, decimal> tarifaDiaria = new()
    {
        ["economico"] = 35m,
        ["compacto"] = 45m,
        ["sedan"] = 55m,
        ["suv"] = 70m,
        ["lujo"] = 120m
    };

    private int diasReserva =>
        reservaCompleta.FechaSalida.HasValue && reservaCompleta.FechaRetorno.HasValue
            ? (int)(reservaCompleta.FechaRetorno.Value.ToDateTime(TimeOnly.MinValue) -
                    reservaCompleta.FechaSalida.Value.ToDateTime(TimeOnly.MinValue)).TotalDays
            : 0;

    private decimal Subtotal
    {
        get
        {
            if (diasReserva <= 0 || reservaCompleta.VehiculoId == 0)
                return 0m;

            var vehiculo = vehiculosDisponibles
                .FirstOrDefault(v => v.Id == reservaCompleta.VehiculoId);

            return vehiculo != null ? diasReserva * vehiculo.PrecioPorDia : 0m;
        }
    }

    private decimal Extras => 0m;
    private decimal Total => Subtotal + Extras;

    private string subtotalMostrar => Subtotal.ToString("C", new CultureInfo("es-DO"));
    private string extrasMostrar => Extras.ToString("C", new CultureInfo("es-DO"));
    private string totalMostrar => Total.ToString("C", new CultureInfo("es-DO"));

    /* ---------- ACCIONES ---------- */
    private async Task CargarDatosReserva()
    {
        try
        {
            var json = await JS.InvokeAsync<string>("localStorage.getItem", "reservaInfo");
            if (!string.IsNullOrEmpty(json))
            {
                var reservaInicial = JsonSerializer.Deserialize<ReservaInicialModel>(json);
                if (reservaInicial != null)
                {
                    reservaCompleta.TipoVehiculo = reservaInicial.TipoVehiculo;
                    reservaCompleta.VehiculoId = reservaInicial.VehiculoId;
                    reservaCompleta.LugarSalida = reservaInicial.LugarSalida;
                    reservaCompleta.LugarRetorno = reservaInicial.LugarRetorno;
                    reservaCompleta.FechaSalida = reservaInicial.FechaSalida;
                    reservaCompleta.FechaRetorno = reservaInicial.FechaRetorno;
                    reservaCompleta.HoraSalida = reservaInicial.HoraSalida;
                    reservaCompleta.HoraRetorno = reservaInicial.HoraRetorno;

                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando datos: {ex.Message}");
        }
    }

    private async Task ConfirmarReserva()
    {
        var vehiculo = vehiculosDisponibles
            .FirstOrDefault(v => v.Id == reservaCompleta.VehiculoId); // ✅ Buscar por ID

        if (vehiculo == null)
        {
            Console.WriteLine("Vehículo no encontrado.");
            return;
        }

        var dto = new ReservaCompletaDto
        {
            Nombre = reservaCompleta.Nombre!,
            Apellido = reservaCompleta.Apellido!,
            Email = reservaCompleta.Email!,
            Telefono = reservaCompleta.Telefono!,
            NumeroLicencia = reservaCompleta.NumeroLicencia!,
            FechaHoraRecogida = reservaCompleta.FechaSalida!.Value
                .ToDateTime(reservaCompleta.HoraSalida ?? TimeOnly.MinValue),
            FechaHoraDevolucion = reservaCompleta.FechaRetorno!.Value
                .ToDateTime(reservaCompleta.HoraRetorno ?? TimeOnly.MinValue),
            LugarRecogida = reservaCompleta.LugarSalida!,
            LugarDevolucion = reservaCompleta.LugarRetorno!,
            Subtotal = Subtotal,
            Extras = Extras,
            Total = Total,
            VehiculoId = vehiculo.Id // ✅ Aquí también por ID
        };

        await ReservaService.CrearReservaCompletaAsync(dto);

        await JS.InvokeVoidAsync("localStorage.removeItem", "reservaInfo");
        reservaCompleta = new ReservaCompletaModel();
        StateHasChanged();
        await MostrarMensajeTemporal("Te hemos enviado los detalles de tu reserva por email. ¡Gracias por elegir HL RentaCar!");
    }






    /* ---------- MODELOS ---------- */
    public class ReservaInicialModel
    {
        public int VehiculoId { get; set; }
        public string? TipoVehiculo { get; set; }
        public string? LugarSalida { get; set; }
        public string? LugarRetorno { get; set; }
        public DateOnly? FechaSalida { get; set; }
        public DateOnly? FechaRetorno { get; set; }
        public TimeOnly? HoraSalida { get; set; }
        public TimeOnly? HoraRetorno { get; set; }
    }

    public class ReservaCompletaModel : ReservaInicialModel
    {
        public string? TipoVehiculo { get; set; }
        public string? Nombre { get; set; }
        public string? Apellido { get; set; }
        public string? Email { get; set; }
        public string? Telefono { get; set; }
        public string? NumeroLicencia { get; set; }
        public string? Comentarios { get; set; }
        public int VehiculoId { get; set; }

    }


    private DateOnly? _fechaSalida
    {
        get => reservaCompleta.FechaSalida;
        set
        {
            reservaCompleta.FechaSalida = value;
            _ = InvokeAsync(ActualizarVehiculosDisponiblesAsync);
        }
    }


    private DateOnly? _fechaRetorno
    {
        get => reservaCompleta.FechaRetorno;
        set
        {
            reservaCompleta.FechaRetorno = value;
            _ = InvokeAsync(ActualizarVehiculosDisponiblesAsync);
        }
    }

    private void LimpiarFormulario()
    {
        reservaCompleta = new ReservaCompletaModel();
        mostrarExito = false;
        StateHasChanged();
    }

    private async Task ActualizarVehiculosDisponiblesAsync()
    {
        if (!_fechaSalida.HasValue || !_fechaRetorno.HasValue)
        {
            vehiculosDisponibles = _todosVehiculos;
            StateHasChanged();
            return;
        }

        var inicio = reservaCompleta.FechaSalida.Value.ToDateTime(TimeOnly.MinValue);
        var fin = reservaCompleta.FechaRetorno.Value.ToDateTime(TimeOnly.MaxValue);

        var idsOcupados = (await ReservaService.ObtenerActivasAsync())
            .Where(r => r.FechaHoraRecogida <= fin && r.FechaHoraDevolucion >= inicio)
            .Select(r => r.VehiculoId)
            .ToHashSet();

        vehiculosDisponibles = _todosVehiculos
            .Where(v => !idsOcupados.Contains(v.Id))
            .ToList();

        Console.WriteLine($"Vehículos visibles: {vehiculosDisponibles.Count}");
        StateHasChanged();
    }

}
