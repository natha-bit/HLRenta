@page "/agregar"
@using RentaCAR.Dtos
@using HLRenta.web.Data.Services
@using Microsoft.AspNetCore.Components.Forms
@inject IWebHostEnvironment env
@inject IVehiculoService vehiculoService
@rendermode InteractiveServer

<div class="form-container">
    @if (!string.IsNullOrEmpty(mensajeExito))
    {
        <div class="@((mensajeExito.StartsWith("✅")) ? "success-message" : "error-message")">
            @mensajeExito
        </div>
    }

    <form @onsubmit="GuardarVehiculo" @onsubmit:preventDefault="true">

        <div class="form-group">
            <label for="marca">Marca <span class="required">*</span></label>
            <select id="marca" class="form-control" @bind="vehiculo.Marca" required>
                <option value="">Seleccionar marca</option>
                @foreach (var marca in marcasDisponibles)
                {
                    <option value="@marca">@marca</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="modelo">Modelo <span class="required">*</span></label>
            <input type="text" id="modelo" class="form-control" @bind="vehiculo.Modelo"
                   placeholder="Ej: Corolla, Civic, Focus" required />
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="año">Año <span class="required">*</span></label>
                <input type="number" id="año" class="form-control" @bind="vehiculo.Anio" min="2000" max="2025" required />
            </div>
            <div class="form-group">
                <label for="color">Color</label>
                <input type="text" id="color" class="form-control" @bind="vehiculo.Color" placeholder="Ej: Blanco, Negro" />
            </div>
        </div>

        <div class="form-group">
            <label for="placa">Número de Placa <span class="required">*</span></label>
            <input type="text" id="placa" class="form-control" style="text-transform: uppercase;"
                   @bind="vehiculo.Placa" placeholder="Ej: ABC-123" required />
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="tipo">Tipo de Vehículo <span class="required">*</span></label>
                <select id="tipo" class="form-control" @bind="vehiculo.Tipo" required>
                    <option value="">Seleccionar tipo</option>
                    @foreach (var tipo in tiposVehiculo)
                    {
                        <option value="@tipo">@tipo</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="precio">Precio por Día (DOP) <span class="required">*</span></label>
                <input type="number" id="precio" class="form-control" @bind="vehiculo.PrecioPorDia"
                       step="0.01" min="1" placeholder="3000.00" required />
            </div>
        </div>

        <div class="form-group">
            <label>Imágenes del Vehículo <span class="required">*</span></label>
            <label for="imagenes" class="image-upload-container">
                @if (previews.Count == 0)
                {
                    <div class="upload-icon">+</div>
                    <div class="upload-text">Subir Imágenes</div>
                    <div class="upload-subtext">Haz clic aquí o arrastra las imágenes</div>
                }
                else
                {
                    @foreach (var img in previews)
                    {
                        <img src="@img" class="image-preview-inside" />
                    }
                }
            </label>
            <div class="input-file-hidden">
            <InputFile id="imagenes" name="imagenes" multiple accept="image/*"
                        OnChange="OnInputFileChange" />
            </div>
        </div>

        <div class="btn-container">
            <button type="button" class="btn btn-secondary" @onclick="LimpiarFormulario">Limpiar</button>
            <button type="submit" class="btn btn-primary">Registrar Vehículo</button>
        </div>
    </form>
</div>


@code {
    private VehiculoDto vehiculo = new();
    private List<IBrowserFile> archivosCargados = new();
    private List<string> previews = new();
    private string? mensajeExito;

    private List<string> marcasDisponibles = new() {
        "Toyota", "Honda", "Ford", "Chevrolet", "Nissan", "Hyundai",
        "Kia", "Volkswagen", "Mazda", "BMW", "Mercedes-Benz", "Audi", "Otro"
    };

    private List<string> tiposVehiculo = new() {
        "Sedán", "SUV", "Hatchback", "Pickup", "Convertible", "Minivan"
    };

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            archivosCargados = e.GetMultipleFiles().ToList();
            previews.Clear();

            foreach (var file in archivosCargados)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream().ReadAsync(buffer);
                var base64 = Convert.ToBase64String(buffer);
                previews.Add($"data:{file.ContentType};base64,{base64}");
            }
        }
        catch (Exception ex)
        {
            mensajeExito = $"❌ Error al cargar imágenes: {ex.Message}";
        }
    }

    private async Task GuardarVehiculo()
    {
        try
        {
            if (string.IsNullOrEmpty(vehiculo.Marca) ||
                string.IsNullOrEmpty(vehiculo.Modelo) ||
                string.IsNullOrEmpty(vehiculo.Placa) ||
                string.IsNullOrEmpty(vehiculo.Tipo) ||
                vehiculo.Anio <= 0 ||
                vehiculo.PrecioPorDia <= 0)
            {
                mensajeExito = "❌ Por favor complete todos los campos requeridos.";
                return;
            }

            if (!archivosCargados.Any())
            {
                mensajeExito = "❌ Debe seleccionar al menos una imagen.";
                return;
            }

            string carpeta = Path.Combine(env.WebRootPath, "imgVehiculos");
            if (!Directory.Exists(carpeta))
                Directory.CreateDirectory(carpeta);

            var rutas = new List<string>();

            foreach (var file in archivosCargados)
            {
                var nombre = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                var rutaFisica = Path.Combine(carpeta, nombre);

                using var stream = new FileStream(rutaFisica, FileMode.Create);
                await file.OpenReadStream().CopyToAsync(stream);

                rutas.Add($"imgVehiculos/{nombre}");
            }

            vehiculo.Imagenes = rutas;

            bool guardado = await vehiculoService.CrearAsync(vehiculo);

            if (guardado)
            {
                LimpiarFormulario();
                await MostrarMensajeTemporal("✅ Vehículo guardado exitosamente en la base de datos.");
                
            }
            else
            {
                await MostrarMensajeTemporal("❌ Error: No se pudo guardar el vehículo.");

            }
        }
        catch (Exception ex)
        {
            await MostrarMensajeTemporal("❌ Error al guardar el vehículo: {ex.Message}");
        }
    }

    private async Task MostrarMensajeTemporal(string mensaje)
    {
        mensajeExito = mensaje;
        StateHasChanged(); 
        await Task.Delay(2000); 
        mensajeExito = null;
        StateHasChanged();
    }

    private void LimpiarFormulario()
    {
        vehiculo = new();
        archivosCargados.Clear();
        previews.Clear();
        mensajeExito = null;
        StateHasChanged();
    }
}
